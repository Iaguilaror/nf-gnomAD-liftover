MKSHELL=/bin/bash

## Rehead and compress
%.sorted.vcf.bgz:Q: %.sorted.tmp %.newheader.tmp
	echo "[DEBUG] changing header and compressing output"
	bcftools reheader \
		--header $stem.newheader.tmp \
		$stem.sorted.tmp \
	| bcftools view --output-type z > $target.build \
	&& mv $target.build $target \
	&& rm $stem.*.tmp

%.newheader.tmp:Q: %.precontigblock.tmp %.newcontigblock.tmp %.postcontigblock.tmp
	echo "[DEBUG] creating new header"
	## Dont print the line with the column names (head -n -1)
	cat $prereq | head -n -1 > $target.build
	# Insert lines before the colnames. Said line gives info about the pipeline
	echo "##nf-gnomAD-liftover_pipeline_date= $(date +%F%_H:%M:%S) find more info at https://github.com/Iaguilaror/nf-gnomAD-liftover" >> $target.build
	echo "##nf-gnomAD-liftover_pipeline_version= $PIPELINE_VERSION" >> $target.build
	echo "##nf-gnomAD-liftover_pipeline_command= $PIPELINE_COMMAND" >> $target.build
	tail -n1 $stem.postcontigblock.tmp >> $target.build \
	&& mv $target.build $target

%.newcontigblock.tmp:Q: %.sorted.tmp %.oldcontigblock.tmp
	echo "[DEBUG] cleaning contig lines"
	# create an index of contig name, and contig header line; put it in a tmp file
	awk 'BEGIN{FS="[=,]"; OFS="\t"} {print $3,$0}' $stem.oldcontigblock.tmp > $stem.contigindex.tmp
	# Loop through contig index to create a new contig block only with contigs shared by header and body
	# create empty file for newcontigblock
	> $target.build
	while read indexline
	do
 		chromosome=$(echo "$indexline" | cut -f1)
		contig_id=$(echo "$indexline" | cut -f2)
		# Count if the chromosome in turn appears at least one time in the vcf body
		check_body=$(bcftools view -H $stem.sorted.tmp | cut -f1 | grep -c -m1 -w $chromosome )
		## use grep for logical test to check if the body had any variant for the contig
		if [ "$check_body" -gt 0 ]
		then
		# Add the chr prefix to contigs since gnomad data will be used to annotate 78GMX...
			echo "$contig_id" >> $target.build
		fi
	done < $stem.contigindex.tmp \
	&& mv $target.build $target

%.oldcontigblock.tmp:Q: %.vcf %.calculate_contig_block_lines
	echo "[DEBUG] extracting contig lines from header"
	# find where in the header does the contig block starts and ends
	contig_block_start=$(cat $stem.contig_block_start.tmp)
	contig_block_end=$(cat $stem.contig_block_end.tmp)
	# extract contig header
	bcftools view -h $stem.vcf \
	| head -n$contig_block_end \
	| tail -n+$contig_block_start > $target.build \
	&& mv $target.build $target

%.precontigblock.tmp:Q: %.vcf %.calculate_contig_block_lines
	echo "[DEBUG] extracting precontig lines from header"
	# find where in the header does the contig block starts and ends
	contig_block_start=$(cat $stem.contig_block_start.tmp)
	contig_block_end=$(cat $stem.contig_block_end.tmp)
	# extract pre-contig header
	bcftools view -h $stem.vcf \
	| head -n$((contig_block_start - 1)) > $target.build \
	&& mv $target.build $target

%.postcontigblock.tmp:Q: %.vcf %.calculate_contig_block_lines
	echo "[DEBUG] extracting poscontig lines from header"
	# find where in the header does the contig block starts and ends
	contig_block_start=$(cat $stem.contig_block_start.tmp)
	contig_block_end=$(cat $stem.contig_block_end.tmp)
	# extract post-contig header
	bcftools view -h $stem.vcf \
	| tail -n+$((contig_block_end + 1)) > $target.build \
	&& mv $target.build $target

# Virtual lines
%.calculate_contig_block_lines:QV: %.vcf
	echo "[DEBUG] finding contig lines numbers in the header"
	bcftools view -h $prereq | grep -n "^##contig=<ID=" | cut -d":" -f1 > $stem.contig_block.tmp
	head -n1 $stem.contig_block.tmp > $stem.contig_block_start.tmp
	tail -n1 $stem.contig_block.tmp > $stem.contig_block_end.tmp

%.sorted.tmp:Q: %.vcf
	echo '[DEBUG] sorting vcf file'
	## Generate a random string to name the tmp directory for sorting
	## this avoids using system's default tmp dir
	tmpdirname=$(for character in {1..3}; do echo {a..z} {A..Z} | tr ' ' '\n' | shuf -n1 ; done | awk ' BEGIN {ORS=""} {print $0}')
	tmpsubdirname=$(for character in {1..9}; do echo {a..z} {A..Z} {0..9} | tr ' ' '\n' | shuf -n1 ; done | awk ' BEGIN {ORS=""} {print $0}')
	tmpdir="$(echo tmp/$tmpdirname/$tmpsubdirname/)"
	bcftools sort \
		--output-file $target.build \
		--temp-dir $tmpdir \
		$prereq \
	&& mv $target.build $target
